

global ROI_mode
ROI_mode = False
global ROI_list
ROI_loc = []
press_loc = []
patchSt = []
ROI_list = []
global Mask_list
Mask_list = []
patchAcc = []
window_w = window_h = 10
prev_on = False

if 'ROI_centres' in [i for i in Area01.attrs.iterkeys()]:
    press_loc = Area01.attrs['ROI_centres'].tolist()
    prev_on = True
else:
    press_loc = []
    prev_on = False
    
if 'ROI_patches' in [i for i in Area01.attrs.iterkeys()]:
    ROI_list = [Area01.attrs['ROI_patches'][:,:,i] for i in range(Area01.attrs['ROI_patches'].shape[2])]
else:
    ROI_list = []
    prev_on = False


global currROI
currROI_L = []



class Index(object):
    idx = len(ROI_list)
    ROI_mode = False
    shift_is_held = False
    
    
    #--------------------------------------------------------------------
    def next_roi(self, event):
        nROIs = len(ROI_list)
        currROI_L[0].remove()
        del currROI_L[0]
        if self.idx<(nROIs-1):
            self.idx += 1
        else:
            self.idx = nROIs-1
        
        if nROIs>0:
            ax2.imshow(ROI_list[self.idx],cmap='binary_r',interpolation='none')
            currROI = Circle([press_loc[self.idx][0],press_loc[self.idx][1]],6,fill=False,color='g',zorder=100)
            currROI_L.append(currROI)
            ax.add_patch(currROI)


        #print 'next_roi'
        
        
    #--------------------------------------------------------------------
    def prev_roi(self, event):
        nROIs = len(ROI_list)
        currROI_L[0].remove()
        del currROI_L[0]


        if self.idx>0:
            self.idx = self.idx - 1
        
        if nROIs>0:
            ax2.imshow(ROI_list[self.idx],cmap='binary_r',interpolation='none')
            currROI = Circle([press_loc[self.idx][0],press_loc[self.idx][1]],6,fill=False,color='g',zorder=100)
            currROI_L.append(currROI)
            ax.add_patch(currROI)
        #print 'next roi'
        
    #--------------------------------------------------------------------
    def remove_roi(self,event):
        nROIs = len(ROI_list) - 1
        if nROIs>0:
            del ROI_list[self.idx]
            del press_loc[self.idx]
            currROI_L[0].remove()
            del currROI_L[0]
            patchSt[self.idx].remove()
            del patchSt[self.idx]
            
            
    #--------------------------------------------------------------------
    def overlay_mask(self,event):
        ax2.imshow(Mask_list[self.idx])
        
    #--------------------------------------------------------------------
    def toggle_selector(self,event):
        #self.ROI_mode = True if self.ROI_mode==False else False
        #bROI_mode.label(str(self.ROI_mode))
        
        nROIs = len(ROI_list)
        #print nROIs
        if self.ROI_mode==False:
            self.ROI_mode = True
            bROI_mode.label.set_text('Stop ROI Selection')
        elif self.ROI_mode==True:
            self.ROI_mode = False
            bROI_mode.label.set_text('Enter ROI Selection')
            



    def onclick(self,event):
        if (event.name=='button_press_event'):
            if (event.inaxes==ax and
            (event.xdata<(meanIm.shape[0]-15) and event.xdata>10) and
            (event.ydata<(meanIm.shape[1]-15) and event.ydata>10)):
                if event.button==3:
                    #print('button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
                    #      (event.button, event.x, event.y, event.xdata, event.ydata))
                    press_loc.append([event.xdata, event.ydata])
                    #print press_loc
                    circ = Circle([event.xdata,event.ydata],6,fill=False,color=[.8,.2,.2])
                    ax.add_patch(circ)
                    patchSt.append(circ)
                    ROI_list.append(meanIm[event.ydata-window_h:event.ydata+window_h,
                                           event.xdata-window_w:event.xdata+window_w])

                    Mask_list.append(np.zeros([2*window_h,
                                               2*window_w]))
                    nROIs = len(ROI_list) - 1
                    ax2.imshow(ROI_list[nROIs],cmap='binary_r')
                    #print len(currROI_L)
                    if len(currROI_L)==1:
                        currROI_L[0].remove()
                        del currROI_L[0]
                    if len(ROI_list)>1:
                        self.idx += 1
                        
                    self.idx = nROIs
                    currROI = Circle([press_loc[self.idx][0],press_loc[self.idx][1]],6,fill=False,color='g',zorder=100)
                    currROI_L.append(currROI)
                    ax.add_patch(currROI)
                    #print self.idx
           
    #-------------------------------------------
    #This is BAD CODE for ROI drawing but kind of works
    def on_motion(self,event):
        if event.button==1:
            
            if event.inaxes==ax2:
                if self.shift_is_held == True:
                    print event.xdata, event.ydata, self.idx
                    
                    Mask_list[self.idx][int(event.ydata)-1:int(event.ydata)+1,
                                        int(event.xdata)-1:int(event.xdata)+1]= 1
    #-------------------------------------------        
        
        
        
    def on_key_press(self, event):
        if event.key == 'shift':
            self.shift_is_held = True

    def on_key_release(self, event):
        if event.key == 'shift':
            self.shift_is_held = False
        RGBA = np.zeros([2*window_h,
                                     2*window_w,
                                     4])
        RGBA[:,:,0] = Mask_list[self.idx]
        RGBA[:,:,3][np.where(Mask_list[self.idx]>0)] = 1
        ax2.cla()
        ax2.imshow(ROI_list[self.idx],cmap='binary_r')
        im2 = ax2.imshow(RGBA,alpha=.8)

                



import matplotlib
class My_Axes(matplotlib.axes.Axes):
    name = "My_Axes"
    def drag_pan(self, button, key, x, y):
        #matplotlib.axes.Axes.drag_pan(self, button, 'x', x, y) # pretend key=='x'
        kk = None

matplotlib.projections.register_projection(My_Axes)
    
            



callback = Index()
            
fig = plt.figure(figsize=(10,8))
ax = fig.add_axes([0.05, 0.1, 0.6, 1],projection="My_Axes")
image = ax.imshow(meanIm,cmap='binary_r')

ax2 = fig.add_axes([0.675, 0.675, .3, .3],projection="My_Axes")
ax2.imshow(np.zeros([20,20]),cmap='binary_r')


#------------------------------------------------------------------------------
axnext = plt.axes([0.81, 0.05, 0.1, 0.075])
bnext = Button(axnext, 'Next')
bnext.on_clicked(callback.next_roi)


axprev = plt.axes([0.7, 0.05, 0.1, 0.075])
bprev = Button(axprev, 'Previous')
bprev.on_clicked(callback.prev_roi)


axROI_mode = plt.axes([0.7, 0.525, 0.2, 0.04])
bROI_mode = Button(axROI_mode, 'Select_ROIs')
bROI_mode.on_clicked(callback.toggle_selector)


rmvROI = plt.axes([0.7, 0.475, 0.2, 0.04])
rmvROI = Button(rmvROI, 'Remove ROIs')
rmvROI.on_clicked(callback.remove_roi)

#------------------------------------------------------------------------------




cid = image.figure.canvas.mpl_connect('button_press_event', callback.onclick)
cid2 = image.figure.canvas.mpl_connect('motion_notify_event', callback.on_motion)
image.figure.canvas.mpl_connect('key_press_event', callback.on_key_press)
image.figure.canvas.mpl_connect('key_release_event', callback.on_key_release)
#cid3 = image.figure.canvas.mpl_connect('button_press_event', callback.on_motion)

def draw_circles(press_loc,ROI_list):
    i = 0
    for coords,patch in zip(press_loc,ROI_list):
        circ = Circle([coords[0],coords[1]],6,fill=False,color=[.8,.2,.2])
        ax.add_patch(circ)
        patchSt.append(circ)
        i+= 1
    currROI = Circle([press_loc[i-1][0],press_loc[i-1][1]],6,fill=False,color='g',zorder=100)
    currROI_L.append(currROI)
    ax.add_patch(currROI)
    
    return currROI_L, patchSt


if prev_on:
    draw_circles(press_loc,ROI_list)



plt.grid('off')
plt.show()

Area01.attrs['ROI_patches'] = np.dstack(ROI_list)
Area01.attrs['ROI_centres'] = np.array(press_loc)